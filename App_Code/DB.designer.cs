#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pnevmotools")]
public partial class DBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Определения метода расширяемости
  partial void OnCreated();
  partial void InsertPic(Pic instance);
  partial void UpdatePic(Pic instance);
  partial void DeletePic(Pic instance);
  partial void InsertRezba(Rezba instance);
  partial void UpdateRezba(Rezba instance);
  partial void DeleteRezba(Rezba instance);
  partial void InsertSize(Size instance);
  partial void UpdateSize(Size instance);
  partial void DeleteSize(Size instance);
  partial void InsertCity(City instance);
  partial void UpdateCity(City instance);
  partial void DeleteCity(City instance);
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertIncomeOrder(IncomeOrder instance);
  partial void UpdateIncomeOrder(IncomeOrder instance);
  partial void DeleteIncomeOrder(IncomeOrder instance);
  partial void InsertOrderDetail(OrderDetail instance);
  partial void UpdateOrderDetail(OrderDetail instance);
  partial void DeleteOrderDetail(OrderDetail instance);
  partial void InsertItem(Item instance);
  partial void UpdateItem(Item instance);
  partial void DeleteItem(Item instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  #endregion
	
	public DBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["pnevmotoolsConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Pic> Pics
	{
		get
		{
			return this.GetTable<Pic>();
		}
	}
	
	public System.Data.Linq.Table<Rezba> Rezbas
	{
		get
		{
			return this.GetTable<Rezba>();
		}
	}
	
	public System.Data.Linq.Table<Size> Sizes
	{
		get
		{
			return this.GetTable<Size>();
		}
	}
	
	public System.Data.Linq.Table<City> Cities
	{
		get
		{
			return this.GetTable<City>();
		}
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<IncomeOrder> IncomeOrders
	{
		get
		{
			return this.GetTable<IncomeOrder>();
		}
	}
	
	public System.Data.Linq.Table<OrderDetail> OrderDetails
	{
		get
		{
			return this.GetTable<OrderDetail>();
		}
	}
	
	public System.Data.Linq.Table<Item> Items
	{
		get
		{
			return this.GetTable<Item>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pics")]
public partial class Pic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ItemID;
	
	private string _path;
	
	private EntityRef<Item> _Item;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    #endregion
	
	public Pic()
	{
		this._Item = default(EntityRef<Item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
	public string path
	{
		get
		{
			return this._path;
		}
		set
		{
			if ((this._path != value))
			{
				this.OnpathChanging(value);
				this.SendPropertyChanging();
				this._path = value;
				this.SendPropertyChanged("path");
				this.OnpathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Pic", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.Pics.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.Pics.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rezba")]
public partial class Rezba : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private EntitySet<Item> _Items;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Rezba()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rezba_Item", Storage="_Items", ThisKey="ID", OtherKey="Rezba")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Rezba1 = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Rezba1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sizes")]
public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Name;
	
	private EntitySet<Item> _Items;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(int value);
    partial void OnNameChanged();
    #endregion
	
	public Size()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Int NOT NULL")]
	public int Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Item", Storage="_Items", ThisKey="ID", OtherKey="Size")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Size1 = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Size1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private int _FreeDelivery;
	
	private int _DeliveryPrice;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFreeDeliveryChanging(int value);
    partial void OnFreeDeliveryChanged();
    partial void OnDeliveryPriceChanging(int value);
    partial void OnDeliveryPriceChanged();
    #endregion
	
	public City()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeDelivery", DbType="Int NOT NULL")]
	public int FreeDelivery
	{
		get
		{
			return this._FreeDelivery;
		}
		set
		{
			if ((this._FreeDelivery != value))
			{
				this.OnFreeDeliveryChanging(value);
				this.SendPropertyChanging();
				this._FreeDelivery = value;
				this.SendPropertyChanged("FreeDelivery");
				this.OnFreeDeliveryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryPrice", DbType="Int NOT NULL")]
	public int DeliveryPrice
	{
		get
		{
			return this._DeliveryPrice;
		}
		set
		{
			if ((this._DeliveryPrice != value))
			{
				this.OnDeliveryPriceChanging(value);
				this.SendPropertyChanging();
				this._DeliveryPrice = value;
				this.SendPropertyChanged("DeliveryPrice");
				this.OnDeliveryPriceChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private System.Nullable<int> _ParentCategory;
	
	private int _SortOrder;
	
	private EntitySet<Category> _Categories;
	
	private EntitySet<Item> _Items;
	
	private EntityRef<Category> _Category1;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentCategoryChanging(System.Nullable<int> value);
    partial void OnParentCategoryChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
	
	public Category()
	{
		this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		this._Category1 = default(EntityRef<Category>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategory", DbType="Int")]
	public System.Nullable<int> ParentCategory
	{
		get
		{
			return this._ParentCategory;
		}
		set
		{
			if ((this._ParentCategory != value))
			{
				if (this._Category1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentCategoryChanging(value);
				this.SendPropertyChanging();
				this._ParentCategory = value;
				this.SendPropertyChanged("ParentCategory");
				this.OnParentCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="ID", OtherKey="ParentCategory")]
	public EntitySet<Category> Categories
	{
		get
		{
			return this._Categories;
		}
		set
		{
			this._Categories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Items", ThisKey="ID", OtherKey="Category")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentCategory", OtherKey="ID", IsForeignKey=true)]
	public Category Category1
	{
		get
		{
			return this._Category1.Entity;
		}
		set
		{
			Category previousValue = this._Category1.Entity;
			if (((previousValue != value) 
						|| (this._Category1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category1.Entity = null;
					previousValue.Categories.Remove(this);
				}
				this._Category1.Entity = value;
				if ((value != null))
				{
					value.Categories.Add(this);
					this._ParentCategory = value.ID;
				}
				else
				{
					this._ParentCategory = default(Nullable<int>);
				}
				this.SendPropertyChanged("Category1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Categories(Category entity)
	{
		this.SendPropertyChanging();
		entity.Category1 = this;
	}
	
	private void detach_Categories(Category entity)
	{
		this.SendPropertyChanging();
		entity.Category1 = null;
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Category1 = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.Category1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncomeOrder")]
public partial class IncomeOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.DateTime _Date;
	
	private int _ItemID;
	
	private int _PricePerItem;
	
	private int _ItemCount;
	
	private int _ItemsLeft;
	
	private EntityRef<Item> _Item;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnPricePerItemChanging(int value);
    partial void OnPricePerItemChanged();
    partial void OnItemCountChanging(int value);
    partial void OnItemCountChanged();
    partial void OnItemsLeftChanging(int value);
    partial void OnItemsLeftChanged();
    #endregion
	
	public IncomeOrder()
	{
		this._Item = default(EntityRef<Item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerItem", DbType="Int NOT NULL")]
	public int PricePerItem
	{
		get
		{
			return this._PricePerItem;
		}
		set
		{
			if ((this._PricePerItem != value))
			{
				this.OnPricePerItemChanging(value);
				this.SendPropertyChanging();
				this._PricePerItem = value;
				this.SendPropertyChanged("PricePerItem");
				this.OnPricePerItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCount", DbType="Int NOT NULL")]
	public int ItemCount
	{
		get
		{
			return this._ItemCount;
		}
		set
		{
			if ((this._ItemCount != value))
			{
				this.OnItemCountChanging(value);
				this.SendPropertyChanging();
				this._ItemCount = value;
				this.SendPropertyChanged("ItemCount");
				this.OnItemCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemsLeft", DbType="Int NOT NULL")]
	public int ItemsLeft
	{
		get
		{
			return this._ItemsLeft;
		}
		set
		{
			if ((this._ItemsLeft != value))
			{
				this.OnItemsLeftChanging(value);
				this.SendPropertyChanging();
				this._ItemsLeft = value;
				this.SendPropertyChanged("ItemsLeft");
				this.OnItemsLeftChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_IncomeOrder", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.IncomeOrders.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.IncomeOrders.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetails")]
public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _OrderID;
	
	private int _ItemID;
	
	private int _ItemCount;
	
	private double _PricePerItem;
	
	private EntityRef<Item> _Item;
	
	private EntityRef<Order> _Order;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemCountChanging(int value);
    partial void OnItemCountChanged();
    partial void OnPricePerItemChanging(double value);
    partial void OnPricePerItemChanged();
    #endregion
	
	public OrderDetail()
	{
		this._Item = default(EntityRef<Item>);
		this._Order = default(EntityRef<Order>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
	public int OrderID
	{
		get
		{
			return this._OrderID;
		}
		set
		{
			if ((this._OrderID != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OrderID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
	public int ItemID
	{
		get
		{
			return this._ItemID;
		}
		set
		{
			if ((this._ItemID != value))
			{
				if (this._Item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemIDChanging(value);
				this.SendPropertyChanging();
				this._ItemID = value;
				this.SendPropertyChanged("ItemID");
				this.OnItemIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCount", DbType="Int NOT NULL")]
	public int ItemCount
	{
		get
		{
			return this._ItemCount;
		}
		set
		{
			if ((this._ItemCount != value))
			{
				this.OnItemCountChanging(value);
				this.SendPropertyChanging();
				this._ItemCount = value;
				this.SendPropertyChanged("ItemCount");
				this.OnItemCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerItem", DbType="Float NOT NULL")]
	public double PricePerItem
	{
		get
		{
			return this._PricePerItem;
		}
		set
		{
			if ((this._PricePerItem != value))
			{
				this.OnPricePerItemChanging(value);
				this.SendPropertyChanging();
				this._PricePerItem = value;
				this.SendPropertyChanged("PricePerItem");
				this.OnPricePerItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OrderDetail", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
	public Item Item
	{
		get
		{
			return this._Item.Entity;
		}
		set
		{
			Item previousValue = this._Item.Entity;
			if (((previousValue != value) 
						|| (this._Item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item.Entity = null;
					previousValue.OrderDetails.Remove(this);
				}
				this._Item.Entity = value;
				if ((value != null))
				{
					value.OrderDetails.Add(this);
					this._ItemID = value.ID;
				}
				else
				{
					this._ItemID = default(int);
				}
				this.SendPropertyChanged("Item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", OtherKey="ID", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.OrderDetails.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.OrderDetails.Add(this);
					this._OrderID = value.ID;
				}
				else
				{
					this._OrderID = default(int);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _Size;
	
	private int _Category;
	
	private System.Nullable<int> _Rezba;
	
	private string _Name;
	
	private string _Description;
	
	private double _Price;
	
	private int _Weight;
	
	private byte _MarginType;
	
	private int _MarginValue;
	
	private string _ShortDescription;
	
	private bool _UseInLister;
	
	private int _WholeMarginValue;
	
	private int _WholeMinCount;
	
	private bool _Visible;
	
	private EntitySet<Pic> _Pics;
	
	private EntitySet<IncomeOrder> _IncomeOrders;
	
	private EntitySet<OrderDetail> _OrderDetails;
	
	private EntityRef<Category> _Category1;
	
	private EntityRef<Rezba> _Rezba1;
	
	private EntityRef<Size> _Size1;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnRezbaChanging(System.Nullable<int> value);
    partial void OnRezbaChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnMarginTypeChanging(byte value);
    partial void OnMarginTypeChanged();
    partial void OnMarginValueChanging(int value);
    partial void OnMarginValueChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnUseInListerChanging(bool value);
    partial void OnUseInListerChanged();
    partial void OnWholeMarginValueChanging(int value);
    partial void OnWholeMarginValueChanged();
    partial void OnWholeMinCountChanging(int value);
    partial void OnWholeMinCountChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    #endregion
	
	public Item()
	{
		this._Pics = new EntitySet<Pic>(new Action<Pic>(this.attach_Pics), new Action<Pic>(this.detach_Pics));
		this._IncomeOrders = new EntitySet<IncomeOrder>(new Action<IncomeOrder>(this.attach_IncomeOrders), new Action<IncomeOrder>(this.detach_IncomeOrders));
		this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
		this._Category1 = default(EntityRef<Category>);
		this._Rezba1 = default(EntityRef<Rezba>);
		this._Size1 = default(EntityRef<Size>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
	public System.Nullable<int> Size
	{
		get
		{
			return this._Size;
		}
		set
		{
			if ((this._Size != value))
			{
				if (this._Size1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSizeChanging(value);
				this.SendPropertyChanging();
				this._Size = value;
				this.SendPropertyChanged("Size");
				this.OnSizeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL")]
	public int Category
	{
		get
		{
			return this._Category;
		}
		set
		{
			if ((this._Category != value))
			{
				if (this._Category1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCategoryChanging(value);
				this.SendPropertyChanging();
				this._Category = value;
				this.SendPropertyChanged("Category");
				this.OnCategoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rezba", DbType="Int")]
	public System.Nullable<int> Rezba
	{
		get
		{
			return this._Rezba;
		}
		set
		{
			if ((this._Rezba != value))
			{
				if (this._Rezba1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRezbaChanging(value);
				this.SendPropertyChanging();
				this._Rezba = value;
				this.SendPropertyChanged("Rezba");
				this.OnRezbaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1024)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
	public double Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int NOT NULL")]
	public int Weight
	{
		get
		{
			return this._Weight;
		}
		set
		{
			if ((this._Weight != value))
			{
				this.OnWeightChanging(value);
				this.SendPropertyChanging();
				this._Weight = value;
				this.SendPropertyChanged("Weight");
				this.OnWeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginType", DbType="TinyInt NOT NULL")]
	public byte MarginType
	{
		get
		{
			return this._MarginType;
		}
		set
		{
			if ((this._MarginType != value))
			{
				this.OnMarginTypeChanging(value);
				this.SendPropertyChanging();
				this._MarginType = value;
				this.SendPropertyChanged("MarginType");
				this.OnMarginTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarginValue", DbType="Int NOT NULL")]
	public int MarginValue
	{
		get
		{
			return this._MarginValue;
		}
		set
		{
			if ((this._MarginValue != value))
			{
				this.OnMarginValueChanging(value);
				this.SendPropertyChanging();
				this._MarginValue = value;
				this.SendPropertyChanged("MarginValue");
				this.OnMarginValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="NVarChar(128)")]
	public string ShortDescription
	{
		get
		{
			return this._ShortDescription;
		}
		set
		{
			if ((this._ShortDescription != value))
			{
				this.OnShortDescriptionChanging(value);
				this.SendPropertyChanging();
				this._ShortDescription = value;
				this.SendPropertyChanged("ShortDescription");
				this.OnShortDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseInLister", DbType="Bit NOT NULL")]
	public bool UseInLister
	{
		get
		{
			return this._UseInLister;
		}
		set
		{
			if ((this._UseInLister != value))
			{
				this.OnUseInListerChanging(value);
				this.SendPropertyChanging();
				this._UseInLister = value;
				this.SendPropertyChanged("UseInLister");
				this.OnUseInListerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WholeMarginValue", DbType="Int NOT NULL")]
	public int WholeMarginValue
	{
		get
		{
			return this._WholeMarginValue;
		}
		set
		{
			if ((this._WholeMarginValue != value))
			{
				this.OnWholeMarginValueChanging(value);
				this.SendPropertyChanging();
				this._WholeMarginValue = value;
				this.SendPropertyChanged("WholeMarginValue");
				this.OnWholeMarginValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WholeMinCount", DbType="Int NOT NULL")]
	public int WholeMinCount
	{
		get
		{
			return this._WholeMinCount;
		}
		set
		{
			if ((this._WholeMinCount != value))
			{
				this.OnWholeMinCountChanging(value);
				this.SendPropertyChanging();
				this._WholeMinCount = value;
				this.SendPropertyChanged("WholeMinCount");
				this.OnWholeMinCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
	public bool Visible
	{
		get
		{
			return this._Visible;
		}
		set
		{
			if ((this._Visible != value))
			{
				this.OnVisibleChanging(value);
				this.SendPropertyChanging();
				this._Visible = value;
				this.SendPropertyChanged("Visible");
				this.OnVisibleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Pic", Storage="_Pics", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<Pic> Pics
	{
		get
		{
			return this._Pics;
		}
		set
		{
			this._Pics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_IncomeOrder", Storage="_IncomeOrders", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<IncomeOrder> IncomeOrders
	{
		get
		{
			return this._IncomeOrders;
		}
		set
		{
			this._IncomeOrders.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OrderDetail", Storage="_OrderDetails", ThisKey="ID", OtherKey="ItemID")]
	public EntitySet<OrderDetail> OrderDetails
	{
		get
		{
			return this._OrderDetails;
		}
		set
		{
			this._OrderDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Category1", ThisKey="Category", OtherKey="ID", IsForeignKey=true)]
	public Category Category1
	{
		get
		{
			return this._Category1.Entity;
		}
		set
		{
			Category previousValue = this._Category1.Entity;
			if (((previousValue != value) 
						|| (this._Category1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category1.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._Category1.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._Category = value.ID;
				}
				else
				{
					this._Category = default(int);
				}
				this.SendPropertyChanged("Category1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rezba_Item", Storage="_Rezba1", ThisKey="Rezba", OtherKey="ID", IsForeignKey=true)]
	public Rezba Rezba1
	{
		get
		{
			return this._Rezba1.Entity;
		}
		set
		{
			Rezba previousValue = this._Rezba1.Entity;
			if (((previousValue != value) 
						|| (this._Rezba1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Rezba1.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._Rezba1.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._Rezba = value.ID;
				}
				else
				{
					this._Rezba = default(Nullable<int>);
				}
				this.SendPropertyChanged("Rezba1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Item", Storage="_Size1", ThisKey="Size", OtherKey="ID", IsForeignKey=true)]
	public Size Size1
	{
		get
		{
			return this._Size1.Entity;
		}
		set
		{
			Size previousValue = this._Size1.Entity;
			if (((previousValue != value) 
						|| (this._Size1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Size1.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._Size1.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._Size = value.ID;
				}
				else
				{
					this._Size = default(Nullable<int>);
				}
				this.SendPropertyChanged("Size1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Pics(Pic entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_Pics(Pic entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_IncomeOrders(IncomeOrder entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_IncomeOrders(IncomeOrder entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
	
	private void attach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Item = this;
	}
	
	private void detach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Item = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Email;
	
	private string _Name;
	
	private string _Phone;
	
	private string _Pnone2;
	
	private string _City;
	
	private string _Street;
	
	private string _Building;
	
	private string _Appartmant;
	
	private string _Comments;
	
	private int _Status;
	
	private System.DateTime _CreatedOn;
	
	private int _DeliveryCost;
	
	private EntitySet<OrderDetail> _OrderDetails;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPnone2Changing(string value);
    partial void OnPnone2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnAppartmantChanging(string value);
    partial void OnAppartmantChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnDeliveryCostChanging(int value);
    partial void OnDeliveryCostChanged();
    #endregion
	
	public Order()
	{
		this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pnone2", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Pnone2
	{
		get
		{
			return this._Pnone2;
		}
		set
		{
			if ((this._Pnone2 != value))
			{
				this.OnPnone2Changing(value);
				this.SendPropertyChanging();
				this._Pnone2 = value;
				this.SendPropertyChanged("Pnone2");
				this.OnPnone2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string Street
	{
		get
		{
			return this._Street;
		}
		set
		{
			if ((this._Street != value))
			{
				this.OnStreetChanging(value);
				this.SendPropertyChanging();
				this._Street = value;
				this.SendPropertyChanged("Street");
				this.OnStreetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
	public string Building
	{
		get
		{
			return this._Building;
		}
		set
		{
			if ((this._Building != value))
			{
				this.OnBuildingChanging(value);
				this.SendPropertyChanging();
				this._Building = value;
				this.SendPropertyChanged("Building");
				this.OnBuildingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appartmant", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
	public string Appartmant
	{
		get
		{
			return this._Appartmant;
		}
		set
		{
			if ((this._Appartmant != value))
			{
				this.OnAppartmantChanging(value);
				this.SendPropertyChanging();
				this._Appartmant = value;
				this.SendPropertyChanged("Appartmant");
				this.OnAppartmantChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
	public string Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			if ((this._Comments != value))
			{
				this.OnCommentsChanging(value);
				this.SendPropertyChanging();
				this._Comments = value;
				this.SendPropertyChanged("Comments");
				this.OnCommentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
	public int Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
	public System.DateTime CreatedOn
	{
		get
		{
			return this._CreatedOn;
		}
		set
		{
			if ((this._CreatedOn != value))
			{
				this.OnCreatedOnChanging(value);
				this.SendPropertyChanging();
				this._CreatedOn = value;
				this.SendPropertyChanged("CreatedOn");
				this.OnCreatedOnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryCost", DbType="Int NOT NULL")]
	public int DeliveryCost
	{
		get
		{
			return this._DeliveryCost;
		}
		set
		{
			if ((this._DeliveryCost != value))
			{
				this.OnDeliveryCostChanging(value);
				this.SendPropertyChanging();
				this._DeliveryCost = value;
				this.SendPropertyChanged("DeliveryCost");
				this.OnDeliveryCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="ID", OtherKey="OrderID")]
	public EntitySet<OrderDetail> OrderDetails
	{
		get
		{
			return this._OrderDetails;
		}
		set
		{
			this._OrderDetails.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}
#pragma warning restore 1591
